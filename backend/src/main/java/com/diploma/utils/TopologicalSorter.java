package com.diploma.utils;

import java.util.*;

public class TopologicalSorter {

    public static List<Map<String, Object>> sort(List<Map<String, Object>> nodes) {
        Map<String, List<String>> graph = new HashMap<>();
        Map<String, Integer> inDegree = new HashMap<>();
        Map<String, Map<String, Object>> idToNode = new HashMap<>();
        Set<String> readerIds = new HashSet<>();

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞, inDegree –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ reader-–Ω–æ–¥—ã
        for (Map<String, Object> node : nodes) {
            String id = (String) node.get("node_id");
            String type = (String) node.get("type");

            inDegree.put(id, 0);
            graph.put(id, new ArrayList<>());
            idToNode.put(id, node);

            if (type != null && type.toLowerCase().contains("reader")) {
                readerIds.add(id);
                System.out.println("üìò Reader node found: " + id);
            }
        }

        // 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∏ –ø–æ–¥—Å—á—ë—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Å—Ç–µ–ø–µ–Ω–µ–π
        for (Map<String, Object> node : nodes) {
            String targetId = (String) node.get("node_id");
            List<String> inputs = (List<String>) node.get("inputs");

            if (inputs != null) {
                for (String inputId : inputs) {
                    if (!graph.containsKey(inputId)) {
                        throw new RuntimeException("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π input: " + inputId);
                    }
                    graph.get(inputId).add(targetId);
                    inDegree.put(targetId, inDegree.get(targetId) + 1);
                }
            }
        }

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PriorityQueue: non-reader –Ω–æ–¥—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        Queue<String> queue = new PriorityQueue<>((a, b) -> {
            boolean aIsReader = readerIds.contains(a);
            boolean bIsReader = readerIds.contains(b);
            return Boolean.compare(aIsReader, bIsReader); // non-reader < reader
        });

        for (String id : inDegree.keySet()) {
            if (inDegree.get(id) == 0) {
                queue.add(id);
            }
        }

        // 4. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        List<Map<String, Object>> sorted = new ArrayList<>();

        while (!queue.isEmpty()) {
            String currentId = queue.poll();

            if (!readerIds.contains(currentId)) {
                sorted.add(idToNode.get(currentId));
            }

            for (String neighbor : graph.get(currentId)) {
                inDegree.put(neighbor, inDegree.get(neighbor) - 1);
                if (inDegree.get(neighbor) == 0) {
                    queue.add(neighbor); // –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                }
            }
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã
        int expectedSize = nodes.size() - readerIds.size();
        if (sorted.size() != expectedSize) {
            throw new RuntimeException("‚ùå –¶–∏–∫–ª –≤ –≥—Ä–∞—Ñ–µ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–æ–∂–∏–¥–∞–ª–æ—Å—å "
                    + expectedSize + ", –ø–æ–ª—É—á–µ–Ω–æ " + sorted.size() + ")");
        }

        return sorted;
    }
}